REM: Exercise 3

REM ********************************************************************
REM SSN COLLEGE OF ENGINEERING (An Autonomous Institution)
REM DEPARTMENT OF INFORMATION TECHNOLOGY
REM ********************************************************************
REM UIT2311 - DATABASE TECHNOLOGY LAB | III SEMESTER
REM ASSIGNMENT-2: DML FUNDAMENTALS
REM ********************************************************************
REM Note: Do not MODIFY/UPDATE the contents in this file. Use as it is.

REM Create the EMPLOYEES table to hold the employee personnel 
REM information for the company.
REM HR.EMPLOYEES has a self referencing foreign key to this table.

Prompt ******  Creating EMPLOYEES table ....

CREATE TABLE employees
    ( employee_id    NUMBER(6)
    , first_name     VARCHAR2(20)
    , last_name      VARCHAR2(25)
	 CONSTRAINT     emp_last_name_nn  NOT NULL
    , email          VARCHAR2(25)
	CONSTRAINT     emp_email_nn  NOT NULL
    , phone_number   VARCHAR2(20)
    , hire_date      DATE
	CONSTRAINT     emp_hire_date_nn  NOT NULL
    , job_id         VARCHAR2(10)
	CONSTRAINT     emp_job_nn  NOT NULL
    , salary         NUMBER(8,2)
    , commission_pct NUMBER(2,2)
    , manager_id     NUMBER(6)
    , department_id  NUMBER(4)
    , CONSTRAINT     emp_salary_min
                     CHECK (salary > 0) 
    , CONSTRAINT     emp_email_uk
                     UNIQUE (email)
    ) ;

ALTER TABLE employees
ADD ( CONSTRAINT     emp_emp_id_pk
                     PRIMARY KEY (employee_id)
    , CONSTRAINT     emp_manager_fk
                     FOREIGN KEY (manager_id)
                      REFERENCES employees
    ) ;

REM ***************************insert data into the EMPLOYEES table

Prompt ******  Populating EMPLOYEES table ....

INSERT INTO employees VALUES 
        ( 100
        , 'Steven'
        , 'King'
        , 'SKING'
        , '515.123.4567'
        , TO_DATE('17-JUN-1987', 'dd-MON-yyyy')
        , 'AD_PRES'
        , 24000
        , NULL
        , NULL
        , 90
        );

INSERT INTO employees VALUES 
        ( 101
        , 'Neena'
        , 'Kochhar'
        , 'NKOCHHAR'
        , '515.123.4568'
        , TO_DATE('21-SEP-1989', 'dd-MON-yyyy')
        , 'AD_VP'
        , 17000
        , NULL
        , 100
        , 90
        );

INSERT INTO employees VALUES 
        ( 102
        , 'Lex'
        , 'De Haan'
        , 'LDEHAAN'
        , '515.123.4569'
        , TO_DATE('13-JAN-1993', 'dd-MON-yyyy')
        , 'AD_VP'
        , 17000
        , NULL
        , 100
        , 90
        );

INSERT INTO employees VALUES 
        ( 103
        , 'Alexander'
        , 'Hunold'
        , 'AHUNOLD'
        , '590.423.4567'
        , TO_DATE('03-JAN-1990', 'dd-MON-yyyy')
        , 'IT_PROG'
        , 9000
        , NULL
        , 102
        , 60
        );

INSERT INTO employees VALUES 
        ( 104
        , 'Bruce'
        , 'Ernst'
        , 'BERNST'
        , '590.423.4568'
        , TO_DATE('21-MAY-1991', 'dd-MON-yyyy')
        , 'IT_PROG'
        , 6000
        , NULL
        , 103
        , 60
        );

INSERT INTO employees VALUES 
        ( 105
        , 'David'
        , 'Austin'
        , 'DAUSTIN'
        , '590.423.4569'
        , TO_DATE('25-JUN-1997', 'dd-MON-yyyy')
        , 'IT_PROG'
        , 4800
        , NULL
        , 103
        , 60
        );

INSERT INTO employees VALUES 
        ( 106
        , 'Valli'
        , 'Pataballa'
        , 'VPATABAL'
        , '590.423.4560'
        , TO_DATE('05-FEB-1998', 'dd-MON-yyyy')
        , 'IT_PROG'
        , 4800
        , NULL
        , 103
        , 60
        );

INSERT INTO employees VALUES 
        ( 107
        , 'Diana'
        , 'Lorentz'
        , 'DLORENTZ'
        , '590.423.5567'
        , TO_DATE('07-FEB-1999', 'dd-MON-yyyy')
        , 'IT_PROG'
        , 4200
        , NULL
        , 103
        , 60
        );

INSERT INTO employees VALUES 
        ( 124
        , 'Kevin'
        , 'Mourgos'
        , 'KMOURGOS'
        , '650.123.5234'
        , TO_DATE('16-NOV-1999', 'dd-MON-yyyy')
        , 'ST_MAN'
        , 5800
        , NULL
        , 100
        , 50
        );

INSERT INTO employees VALUES 
        ( 141
        , 'Trenna'
        , 'Rajs'
        , 'TRAJS'
        , '650.121.8009'
        , TO_DATE('17-OCT-1995', 'dd-MON-yyyy')
        , 'ST_CLERK'
        , 3500
        , NULL
        , 124
        , 50
        );

INSERT INTO employees VALUES 
        ( 142
        , 'Curtis'
        , 'Davies'
        , 'CDAVIES'
        , '650.121.2994'
        , TO_DATE('29-JAN-1997', 'dd-MON-yyyy')
        , 'ST_CLERK'
        , 3100
        , NULL
        , 124
        , 50
        );

INSERT INTO employees VALUES 
        ( 143
        , 'Randall'
        , 'Matos'
        , 'RMATOS'
        , '650.121.2874'
        , TO_DATE('15-MAR-1998', 'dd-MON-yyyy')
        , 'ST_CLERK'
        , 2600
        , NULL
        , 124
        , 50
        );

INSERT INTO employees VALUES 
        ( 144
        , 'Peter'
        , 'Vargas'
        , 'PVARGAS'
        , '650.121.2004'
        , TO_DATE('09-JUL-1998', 'dd-MON-yyyy')
        , 'ST_CLERK'
        , 2500
        , NULL
        , 124
        , 50
        );

INSERT INTO employees VALUES 
        ( 149
        , 'Eleni'
        , 'Zlotkey'
        , 'EZLOTKEY'
        , '011.44.1344.429018'
        , TO_DATE('29-JAN-2000', 'dd-MON-yyyy')
        , 'SA_MAN'
        , 10500
        , .2
        , 100
        , 80
        );

INSERT INTO employees VALUES 
        ( 174
        , 'Ellen'
        , 'Abel'
        , 'EABEL'
        , '011.44.1644.429267'
        , TO_DATE('11-MAY-1996', 'dd-MON-yyyy')
        , 'SA_REP'
        , 11000
        , .30
        , 149
        , 80
        );

INSERT INTO employees VALUES 
        ( 176
        , 'Jonathon'
        , 'Taylor'
        , 'JTAYLOR'
        , '011.44.1644.429265'
        , TO_DATE('24-MAR-1998', 'dd-MON-yyyy')
        , 'SA_REP'
        , 8600
        , .20
        , 149
        , 80
        );

INSERT INTO employees VALUES 
        ( 178
        , 'Kimberely'
        , 'Grant'
        , 'KGRANT'
        , '011.44.1644.429263'
        , TO_DATE('24-MAY-1999', 'dd-MON-yyyy')
        , 'SA_REP'
        , 7000
        , .15
        , 149
        , NULL
        );

INSERT INTO employees VALUES 
        ( 200
        , 'Jennifer'
        , 'Whalen'
        , 'JWHALEN'
        , '515.123.4444'
        , TO_DATE('17-SEP-1987', 'dd-MON-yyyy')
        , 'AD_ASST'
        , 4400
        , NULL
        , 101
        , 10
        );

INSERT INTO employees VALUES 
        ( 201
        , 'Michael'
        , 'Hartstein'
        , 'MHARTSTE'
        , '515.123.5555'
        , TO_DATE('17-FEB-1996', 'dd-MON-yyyy')
        , 'MK_MAN'
        , 13000
        , NULL
        , 100
        , 20
        );

INSERT INTO employees VALUES 
        ( 202
        , 'Pat'
        , 'Fay'
        , 'PFAY'
        , '603.123.6666'
        , TO_DATE('17-AUG-1997', 'dd-MON-yyyy')
        , 'MK_REP'
        , 6000
        , NULL
        , 201
        , 20
        );

INSERT INTO employees VALUES 
        ( 205
        , 'Shelley'
        , 'Higgins'
        , 'SHIGGINS'
        , '515.123.8080'
        , TO_DATE('07-JUN-1994', 'dd-MON-yyyy')
        , 'AC_MGR'
        , 12000
        , NULL
        , 101
        , 110
        );

INSERT INTO employees VALUES 
        ( 206
        , 'William'
        , 'Gietz'
        , 'WGIETZ'
        , '515.123.8181'
        , TO_DATE('07-JUN-1994', 'dd-MON-yyyy')
        , 'AC_ACCOUNT'
        , 8300
        , NULL
        , 205
        , 110
        );

COMMIT;

REM ***************************END OF insert data into the EMPLOYEES table


REM: 9. Display firsy name, job id and salary of all the employees.

select first_name, job_id, salary from employees;

REM: 10. Display the id, name(first & last), salary and annual salary of all the employees.
Sort the employees by first name. Label the columns as shown below:
(EMPLOYEE_ID, FULL NAME, MONTHLY SAL, ANNUAL SALARY)

select employee_id as EMPLOYEE_ID, first_name||' '||last_name as "FULL NAME", salary as "MONTHLY SAL", salary*12 as "ANNUAL SALARY" from employees order by first_name

REM: 11. List the different jobs in which the employees are working for.

select distinct(job_id) from employees;

REM: 12. Display the id, first name, job id, salary and commission of employees who are
earning commissions

select employee_id, first_name, job_id, salary, commission_pct*salary as commission from employees where commission_pct is not null;

REM: 13. Display the details (id, first name, job id, salary and dept id) of employees who
are MANAGERS.

select employee_id, job_id, salary, department_id from employees where manager_id is not null

REM: 14. Display the details of employees other than sales representatives (id, first name,
hire date, job id, salary and dept id) who are hired after ‘01-May-1999’ or whose
salary is at least 10000.

select employee_id, first_name, hire_date, job_id, salary, department_id from employees where (hire_date>'01-May-1999' or salary>=10000 and job_id!='SA_REP')

REM: 15. Display the employee details (first name, salary, hire date and dept id) whose
salary falls in the range of 5000 to 15000 and his/her name begins with any of
characters (A,J,K,S). Sort the output by first name.

select first_name, salary, hire_date, department_id from employees where (salary>=5000 and salary<=15000) and first_name like 'A%' or first_name like 'J%' or first_name like 'K%' or first_name like 'S%' order by first_name

REM: 16. Display the experience of employees in no. of years and months who were hired
after 1998. Label the columns as: (EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, EXP-YRS,
EXP-MONTHS)


REM: 17. Display the total number of departments.

select count(distinct(department_id)) from employees;

REM: 18. Show the number of employees hired by year-wise. Sort the result by year-wise.

select employee_id from employees group by hire_date order by hire_date;

REM: 19. Display the minimum, maximum and average salary, number of employees for each department. Exclude the employee(s) who are not in any department. Include the department(s) with at least 2 employees and the average salary is more than 10000. Sort the result by minimum salary in descending order.

select min(salary), max(salary), avg(salary), count(*), department_id
from employees
where department_id IS NOT NULL
having count(department_id)>=2 and avg(salary)>100
group by department_id
order by min(salary) desc


REM: PART 1 - DML UPDATE OPERATIONS & TCL STATEMENTS

REM: 1. Populate the relation with the above set of tuples using INSERT clause.

create table classes( class varchar(20), type varchar(2), country varchar(20), numguns number(6), bore number(3), displacement number(10))

INSERT INTO classes VALUES ('bb', 'Germany', 8, 14, 32000);

INSERT INTO classes VALUES ('bb', 'USA', 9, 16, 46000);

INSERT INTO classes VALUES ('bc', 'Japan', 8, 15, 42000);

INSERT INTO classes VALUES ('bb', 'USA', 9, 16, 37000);

INSERT INTO classes (class_type, country, numGuns, bore, displacement)
VALUES ('bb', 'Gt. Britain', 8, 15, 29000);

INSERT INTO classes VALUES ('bc', 'Gt. Britain', 6, 15, 32000);

REM: 2. Display the populated relation.

select * from classes;

REM: 3. Mark an intermediate point here in this transaction.

savepoint intermediate_point

REM: 4. For the battleships having at least 9 number of guns or the ships with at least 15 inch bore, increase the displacement by 10%.

update  classes 
set displacement=displacement + (displacement*0.1) 
where numguns>=9 or bore>=15;

REM: 5. Delete Kongo class of ship from Classes table.

delete from classes
where class='Kongo';

REM: 6. Display your changes to the table.

select*from classes;

REM: 7. Discard the recent updates to the relation without discarding the earlier INSERT operation(s).

rollback to intermediate_point;

REM: 8. Commit the changes

commit;